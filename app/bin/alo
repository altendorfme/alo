#!/usr/bin/env php
<?php
/**
 * Alô CLI Application
 * 
 * Provides command-line interface for various Alô operations
 */

require __DIR__ . '/../vendor/autoload.php';

use League\CLImate\CLImate;
use alo\Container\ContainerFactory;
use alo\Commands\Campaign\QueueCommand;
use alo\Commands\Campaign\SendCommand;
use alo\Commands\GeoIP\UpdateCommand as GeoIPUpdateCommand;
use alo\Commands\Database\OptimizeCommand;
use alo\Commands\App\MigrationCommand;
use alo\Commands\Analytics\OptimizeSubscribersCommand;

// Create dependency injection container
$container = ContainerFactory::create();

// Initialize CLImate
$climate = new CLImate();

// Define available commands
$commands = [
    'campaign:queue' => function() use ($container, $climate) {
        $command = $container->get(QueueCommand::class);
        return $command->execute();
    },
    'campaign:send' => function() use ($container, $climate) {
        $command = $container->get(SendCommand::class);
        return $command->execute();
    },
    'geoip:update' => function() use ($container, $climate) {
        $command = $container->get(GeoIPUpdateCommand::class);
        return $command->execute();
    },
    'app:migration' => function() use ($container, $climate) {
        $command = $container->get(MigrationCommand::class);
        return $command->execute();
    },
    'optimize:analytics:subscribers' => function() use ($container, $climate) {
        $command = $container->get(OptimizeSubscribersCommand::class);
        return $command->execute();
    },
    'optimize:database' => function() use ($container, $climate) {
        $command = $container->get(OptimizeCommand::class);
        return $command->execute();
    },
];

// Check if a command was provided
if (!isset($argv[1])) {
    $climate->blue()->bold()->out("Alô");
    $climate->bold()->out("Available commands:");
    foreach (array_keys($commands) as $availableCommand) {
        $climate->out("  - {$availableCommand}");
    }
    exit(1);
}

// Get the command
$commandName = $argv[1];

try {
    // Check if command exists
    if (!isset($commands[$commandName])) {
        $climate->red()->out("Unknown command: {$commandName}");
        $climate->out("Available commands:");
        foreach (array_keys($commands) as $availableCommand) {
            $climate->out("  - {$availableCommand}");
        }
        exit(1);
    }

    // Execute the command
    $exitCode = $commands[$commandName]();
    exit($exitCode);

} catch (Exception $e) {
    $climate->red()->out("Error: " . $e->getMessage());
    exit(1);
}
